#!/bin/bash
# Copyright 2014, Dominique LaSalle
#
# I know I should write this in plain 'sh', but I haven't...


###############################################################################
# CONFIG VARIABLES ############################################################
###############################################################################

NAME="gooseberry"
DOMLIB_PATH="domlib"


###############################################################################
# FUNCTIONS ###################################################################
###############################################################################

die() {
  echo "ERROR: ${@}" 1>&2
  exit 1
}

abspath() {
  if [[ "${@::1}" == "/" ]]; then
    echo "${@}"
  else
    echo "${PWD}/${@}"
  fi
}

show_help() {
  echo "USAGE: configure [options]"
  echo ""
  echo "OPTIONS:"
  echo "  --debug"
  echo "    Build with debugging symbols and turn optimizations off."
  echo "  --assert"
  echo "    Build with assertions on."
  echo "  --prefix=<prefix>"
  echo "    Set the install prefix."
  echo "  --shared"
  echo "    Generate a shared version of lib${NAME} instead of a static one."
  echo "  --cc=<cc>"
  echo "    Set the C compiler to use."
  echo "  --indices64bit"
  echo "    Use 64 bit data types for edges instead of 32 bit."
  echo "  --dimensions64bit"
  echo "    Use 64 bit data types for vertices instead of 32 bit."
  echo "  --values64bit"
  echo "    Use doubles to store values instead of floats."
#  echo "  --noomp"
#  echo "    Build without multithreading."
  echo "  --nompi"
  echo "    Do not build MPI library functions and binaries."
  echo ""
}


###############################################################################
# OPTION PARSING ##############################################################
###############################################################################


CONFIG_FLAGS="-DCMAKE_VERBOSE_MAKEFILE=1"


# default values
CMAKE="$(which cmake)"
BUILDDIR="build/$(uname -s)-$(uname -m)"


# parse arguments
for i in "${@}"; do
  case "${i}" in
    # help
    -h|--help)
    show_help
    exit 0
    ;;
    # debug
    --debug)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DDEBUG=1"
    ;;
    # assert
    --assert)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DASSERT=1"
    ;;
    # prefix
    --prefix=*)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DCMAKE_INSTALL_PREFIX=${i#*=}"
    ;;
    # shared
    --shared)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DSHARED=1"
    ;;
    # cc
    --cc=*)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DCMAKE_C_COMPILER=${i#*=}"
    ;;
    # 64 bit indices
    --indices64bit)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DBIGINDICIES=1"
    ;;
    # 64 bit dimensions
    --dimensions64bit)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DBIGDIMENSIONS=1"
    ;;
    # 64 bit values
    --values64bit)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DBIGVALUES=1"
    ;;
    # disable openmp 
    --noomp)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DNO_OMP=1"
    ;;
    # disable mpi
    --nompi)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DNO_MPI=1"
    ;;
    # bad argument
    *)
    die "Unknown option '${i}'"
    ;;
  esac
done


# check if cmake exists
if [[ ! -x "${CMAKE}" ]]; then
  die "Could not find usable cmake: '${CMAKE}'" 
else
  echo "Found CMAKE: '${CMAKE}'"
  echo "--> $("${CMAKE}" --version)"
fi


# check if domlib exists
if [[ ! -d "${DOMLIB_PATH}" ]]; then
  die "Could not find domlib: '${DOMLIB_PATH}'"
else
  CONFIG_FLAGS="${CONFIG_FLAGS} -DDOMLIB_PATH=${DOMLIB_PATH}"
fi


# clean out build directory if it exists
if [[ -d "${BUILDDIR}" ]]; then
  echo "Removing old build directory '${BUILDDIR}'..."
  rm -rf "${BUILDDIR}"
fi


# create build directory 
mkdir -vp "${BUILDDIR}" || \
    die "Failed to create build directory: '${BUILDDIR}'"




###############################################################################
# RUN CMAKE ###################################################################
###############################################################################

ROOTDIR="${PWD}"
pushd "${BUILDDIR}"

echo "Calling cmake with arguments '${CONFIG_FLAGS}'"
"${CMAKE}" "${ROOTDIR}" ${CONFIG_FLAGS}
if [[ "$?" != "0" ]]; then
  echo "CMake failed with '$?'" 1>&2
  exit $?
fi

popd


# create proxy makefile
(
echo "#######################################################################"
echo "# Makefile generated by '$0' at $(date)"
echo "# Using flags:"
for d in ${CONFIG_FLAGS}; do
  echo "#	${d}"
done
echo "#######################################################################"
echo ""
echo "all clean install:"
echo "	make -C ${BUILDDIR} \$@ \$(MAKEFLAGS)"
echo ""
echo "distclean:"
echo "	rm -rvf ${BUILDDIR} Makefile"
echo ""
) > Makefile



